version: "3.8"

# REF: https://www.cloudbooklet.com/how-to-install-nginx-and-lets-encrypt-with-docker-ubuntu-20-04/

x-loki:
  &loki-logging
  driver: loki
  options:
    loki-url: "http://localhost:3100/loki/api/v1/push"
    max-size: '5m'
    max-file: '3'
    keep-file: 'false'

services:
#### PROXY
  proxy:
    container_name: proxy 
    image: nginx:alpine
    restart: always
    environment:
      - DOMAIN=${DOMAIN}
    volumes:
      - ./proxy/conf.d:/etc/nginx/templates
      - ./proxy/conf.d/.htpasswd:/etc/nginx/conf.d/.htpasswd
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf
      - ./proxy/certbot/conf:/etc/nginx/ssl
      - ./proxy/certbot/data:/var/www/certbot
      - ./proxy/rules/naxsi_core.rules:/etc/naxsi/naxsi_core.rules
      - ./proxy/streamconf:/etc/nginx/streamconf

    ports:
      - 80:80
      - 443:443
      - 21056-21106:21056-21106
    logging: *loki-logging

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${EMAIL} --agree-tos --no-eff-email -d pocket-mainnet.${DOMAIN} -d eth-mainnet.${DOMAIN}  -d monitoring.${DOMAIN}
    environment:
      - DOMAIN=${DOMAIN}
      - EMAIL=${EMAIL}
    volumes:
      - ./proxy/certbot/conf:/etc/letsencrypt
      - ./proxy/certbot/logs:/var/log/letsencrypt
      - ./proxy/certbot/data:/var/www/certbot

#### BLOCKCHAINS

  pocket-mainnet:
    image: poktnetwork/pocket:RC-0.6.3.6 
    user: root
    container_name: pocket-mainnet 
    command: ["pocket", "start", "--keybase=false", "--mainnet", "--datadir=/home/app/.pocket/"]
    ports: 
      - "26656:26656"
    expose:
      - "8081"
      - "26656"
      - "26660"
    volumes:
      - ./pocket-mainnet/config.json:/home/app/.pocket/config/config.json                      # Pocket Configuration file 
      - ./pocket-mainnet/data/:/home/app/.pocket/data/                                         # Blockchain data
    environment:
      - POCKET_CORE_KEY=""
      - GODEBUG="madvdontneed=1"
    logging: *loki-logging

# geth-mainnet:
#   extends:
#     file: ../../geth/docker-compose-local.yml 
#     service: geth-mainnet
#   volumes:
#     - ../../geth/geth:/.mainnet
#   logging: *loki-logging
#
# geth-rinkeby:
#   extends: 
#     file: ../../geth/docker-compose-local.yml 
#     service: geth-rinkeby
#   volumes:
#     - ../../geth/rinkeby:/.rinkeby
#   logging: *loki-logging
#
# geth-ropsten:
#   extends: 
#     file: ../../geth/docker-compose-local.yml 
#     service: geth-ropsten
#   volumes:
#     - ../../geth/ropsten:/.ropsten
#   logging: *loki-logging
#
  xdai-mainnet:
    extends: 
      file: ../../xdai/docker-compose.yml 
      service: xdai-mainnet 
    volumes:
      - ../../xdai/xdai:/.xdai
    logging: *loki-logging

  erigon-archival:
    extends:
      file: ../../ethereum/erigon/docker-compose.yaml 
      service: erigon-archival 
    volumes:
      - ../../ethereum/erigon/archival:/home/erigon/.local/share/erigon
    logging: *loki-logging

  erigon-ropsten:
    extends:
      file: ../../ethereum/erigon/docker-compose.yaml 
      service: erigon-ropsten 
    volumes:
      - ../../ethereum/erigon/ropsten:/home/erigon/.local/share/erigon
    logging: *loki-logging

  erigon-rinkeby:
    extends:
      file: ../../ethereum/erigon/docker-compose.yaml 
      service: erigon-rinkeby
    volumes:
      - ../../ethereum/erigon/rinkeby:/home/erigon/.local/share/erigon
    logging: *loki-logging

  erigon-goerli:
    extends:
      file: ../../ethereum/erigon/docker-compose.yaml 
      service: erigon-goerli 
    volumes:
      - ../../ethereum/erigon/goerli:/home/erigon/.local/share/erigon
    logging: *loki-logging

  erigon-mainnet-rpc:
    container_name: erigon-mainnet-rpc
    extends:
      file: ../../ethereum/erigon/docker-compose.yaml 
      service: erigon-mainnet-rpc 
    volumes:
      - ../../ethereum/erigon/archival:/home/erigon/.local/share/erigon
    logging: *loki-logging
  
  erigon-rinkeby-rpc:
    container_name: erigon-rinkeby-rpc
    extends:
      file: ../../ethereum/erigon/docker-compose.yaml 
      service: erigon-rinkeby-rpc 
    volumes:
      - ../../ethereum/erigon/rinkeby:/home/erigon/.local/share/erigon
    logging: *loki-logging

  erigon-goerli-rpc:
    container_name: erigon-goerli-rpc
    extends:
      file: ../../ethereum/erigon/docker-compose.yaml 
      service: erigon-goerli-rpc 
    volumes:
      - ../../ethereum/erigon/goerli:/home/erigon/.local/share/erigon
    logging: *loki-logging
  
  erigon-ropsten-rpc:
    container_name: erigon-ropsten-rpc
    extends:
      file: ../../ethereum/erigon/docker-compose.yaml 
      service: erigon-ropsten-rpc
    volumes:
      - ../../ethereum/erigon/ropsten:/home/erigon/.local/share/erigon
    logging: *loki-logging

  ava1:
    extends:
      file: ../../avalanche/docker-compose.yaml 
      service: ava1 
    volumes:
      - ../../avalanche:/root/.avalanchego
      - ../../avalanche:/root/.cache
    logging: *loki-logging

  fuse-mainnet:
    extends:
      file: ../../fuse/docker-compose.yaml 
      service: fuse-mainnet 
    volumes:
      - "../../fuse/config:/config/custom"
      - "../../fuse/data:/data"
    logging: *loki-logging

### MONITORING 
  loki:
    image: grafana/loki:latest
    container_name:  loki 
    volumes:
      - ./monitoring/loki/config.yaml:/etc/loki/local-config.yaml
    expose:
      - 3100
    ports:
      - "3100:3100"
    command: --config.file=/etc/loki/local-config.yaml
    logging: *loki-logging

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus 
    user: "1000"
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - ./monitoring/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
    expose:
      - 9090
    logging: *loki-logging

  grafana:
    image: grafana/grafana:latest
    container_name: grafana 
    user: "104"
    expose:
    - 3000
    restart: unless-stopped
    volumes:
      - ./monitoring/grafana/data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=YOURADMINPASSWORD
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning/dashboards
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DATABASE_TYPE=sqlite3
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_DOMAIN=monitoring.${DOMAIN} 
      - GF_USERS_DEFAULT_THEME=dark
      - GF_SMTP_ENABLED=false
      - GF_SMTP_HOST=smtp.gmail.com:587
      - GF_SMTP_USER=myadrress@gmail.com
      - GF_SMTP_PASSWORD=mypassword
      - GF_SMTP_FROM_ADDRESS=myaddress@gmail.com
    logging: *loki-logging

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter 
    restart: unless-stopped
    ports:
      - 9101:9100
    logging: *loki-logging

  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor 
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    expose:
      - 8080
    logging: *loki-logging

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    expose:
      - 9093
    volumes:
      - ./monitoring/alertmanager/:/etc/alertmanager/
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yaml'
      - '--storage.path=/alertmanager'
    logging: *loki-logging

